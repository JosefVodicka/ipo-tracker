// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  watchlists    Watchlist[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  symbol      String   @unique
  description String?  @db.Text
  industry    String?
  founded     Int?
  ceo         String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ipos        IPO[]
}

model IPO {
  id             String      @id @default(cuid())
  companyId      String
  company        Company     @relation(fields: [companyId], references: [id])
  expectedDate   DateTime
  priceRangeLow  Float?
  priceRangeHigh Float?
  finalPrice     Float?
  shares         Int?
  marketCap      Float?
  status         IPOStatus   @default(UPCOMING)
  exchange       String?
  underwriters   String[]
  filingDate     DateTime?
  offeringType   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  watchlists     Watchlist[]
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  ipoId     String
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipo       IPO      @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  @@unique([userId, ipoId])
}

enum IPOStatus {
  UPCOMING
  PRICED
  TRADING
  WITHDRAWN
  POSTPONED
}
